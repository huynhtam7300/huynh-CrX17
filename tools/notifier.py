#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Notifier t·ªëi gi·∫£n cho Telegram (kh√¥ng c·∫ßn th∆∞ vi·ªán ngo√†i).
T√≠nh nƒÉng:
- TG_ENABLE=1 m·ªõi g·ª≠i; m·∫∑c ƒë·ªãnh 0 (t·∫Øt).
- TG_BOOT_NOTI=1 th√¨ g·ª≠i 1 tin khi service kh·ªüi ƒë·ªông (ch·ªëng tr√πng b·∫±ng TTL).
- TG_QUIET_HOURS=HH-HH (vd: 00-07) ƒë·ªÉ im l·∫∑ng ngo√†i gi·ªù; ƒë·∫∑t "none" ƒë·ªÉ t·∫Øt.
- Rate-limit/kh·ª≠ tr√πng theo key.
- Alias bi·∫øn m√¥i tr∆∞·ªùng TELEGRAM_* c≈©ng ƒë∆∞·ª£c nh·∫≠n.
"""

import os, json, time, hashlib
from datetime import datetime, timezone
from urllib.parse import urlencode
from urllib.request import urlopen, Request

# ---- Env & default ----
def env(key, default=""):
    v = os.environ.get(key)
    if v is None:
        # alias TELEGRAM_* -> TG_*
        if key.startswith("TG_"):
            v = os.environ.get("TELEGRAM_" + key[3:], default)
        else:
            v = default
    return str(v)

TG_ENABLE        = env("TG_ENABLE", "0")           # 0=t·∫Øt, 1=b·∫≠t
TG_TOKEN         = env("TG_BOT_TOKEN", "")
TG_CHAT          = env("TG_CHAT_ID", "")
TG_QUIET         = env("TG_QUIET_HOURS", "none")   # "none" ho·∫∑c "00-07"
BOOT_FLAG        = env("CRX_BOOT_NOTI", "")        # do run_loop ƒë·∫∑t t·∫°m khi c·∫ßn
RATE_LIMIT_SEC   = int(env("TG_RATE_LIMIT_SEC", "600"))
STATE_PATH       = "data/.noti_state.json"
MACRO_JSON       = "data/macro_bias.json"

def now_iso():
    return datetime.now(timezone.utc).astimezone().isoformat(timespec="seconds")

def quiet_hours():
    if TG_QUIET.lower() == "none": return False
    try:
        lo, hi = [int(x) for x in TG_QUIET.split("-")]
        h = int(datetime.now().astimezone().strftime("%H"))
        return lo <= h < hi
    except:
        return False

def load_state():
    try:
        return json.load(open(STATE_PATH, "r", encoding="utf-8"))
    except:
        return {}

def save_state(s):
    os.makedirs("data", exist_ok=True)
    json.dump(s, open(STATE_PATH, "w", encoding="utf-8"), indent=2, ensure_ascii=False)

def dedupe(key: str, ttl: int) -> bool:
    """Tr·∫£ v·ªÅ True n·∫øu n√™n B·ªé QUA (ƒë√£ g·ª≠i g·∫ßn ƒë√¢y)."""
    s = load_state()
    d = s.get("dedupe", {})
    now = int(time.time())
    last = int(d.get(key, 0))
    if now - last < ttl:
        return True
    d[key] = now
    s["dedupe"] = d
    save_state(s)
    return False

def send_tg(text: str, force=False):
    if TG_ENABLE != "1":
        return False, "disabled"
    if (not force) and quiet_hours():
        return False, "quiet"
    if not TG_TOKEN or not TG_CHAT:
        return False, "missing_token_or_chat"

    data = {
        "chat_id": TG_CHAT,
        "text": text,
        "parse_mode": "Markdown",
        "disable_web_page_preview": True,
    }
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    req = Request(url, data=urlencode(data).encode("utf-8"))
    with urlopen(req, timeout=10) as r:
        ok = (r.getcode() == 200)
    return ok, "sent"

# ---- Events ----
def boot_event():
    # Ch·ªëng tr√πng theo key c·ªë ƒë·ªãnh "boot" v·ªõi TTL 10 ph√∫t
    if dedupe("boot", 600):
        return
    text = f"‚úÖ *CrX PhaseB Loop kh·ªüi ƒë·ªông*\n`{now_iso()}`"
    send_tg(text, force=True)

def macro_event():
    try:
        cur = json.load(open(MACRO_JSON, "r", encoding="utf-8"))
    except:
        return
    s = load_state()
    prev = s.get("macro_prev")
    changes = []
    if prev:
        for k in ("macro_bias_3m", "macro_bias_6m"):
            if cur.get(k) != prev.get(k):
                changes.append(f"{k}: {prev.get(k, '?')} ‚Üí *{cur.get(k)}*")
        try:
            if abs(float(cur.get("macro_conf", 0)) - float(prev.get("macro_conf", 0))) >= 0.10:
                changes.append(f"macro_conf: {float(prev.get('macro_conf',0)):.2f} ‚Üí *{float(cur.get('macro_conf',0)):.2f}*")
        except Exception:
            pass
    else:
        changes.append("Kh·ªüi t·∫°o macro bias.")

    if changes:
        # Kh·ª≠ tr√πng theo hash n·ªôi dung thay ƒë·ªïi (TTL m·∫∑c ƒë·ªãnh)
        key = "macro:" + hashlib.sha1("\n".join(changes).encode()).hexdigest()
        if not dedupe(key, RATE_LIMIT_SEC):
            text = "üß≠ *SOUL-MACRO c·∫≠p nh·∫≠t*\n" + "\n".join(f"‚Ä¢ {x}" for x in changes) + f"\n`ts: {cur.get('ts','-')}`"
            send_tg(text)
        s["macro_prev"] = cur
        save_state(s)

if __name__ == "__main__":
    # G·ª≠i boot n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu (do run_loop b·∫≠t l√∫c start)
    if BOOT_FLAG:
        boot_event()
    # G·ª≠i macro n·∫øu c√≥ thay ƒë·ªïi
    macro_event()